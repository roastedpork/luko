// Generated by gencpp from file led_driver/LightDriver.msg
// DO NOT EDIT!


#ifndef LED_DRIVER_MESSAGE_LIGHTDRIVER_H
#define LED_DRIVER_MESSAGE_LIGHTDRIVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace led_driver
{
template <class ContainerAllocator>
struct LightDriver_
{
  typedef LightDriver_<ContainerAllocator> Type;

  LightDriver_()
    : op()
    , image()  {
    }
  LightDriver_(const ContainerAllocator& _alloc)
    : op(_alloc)
    , image(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _op_type;
  _op_type op;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _image_type;
  _image_type image;




  typedef boost::shared_ptr< ::led_driver::LightDriver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::led_driver::LightDriver_<ContainerAllocator> const> ConstPtr;

}; // struct LightDriver_

typedef ::led_driver::LightDriver_<std::allocator<void> > LightDriver;

typedef boost::shared_ptr< ::led_driver::LightDriver > LightDriverPtr;
typedef boost::shared_ptr< ::led_driver::LightDriver const> LightDriverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::led_driver::LightDriver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::led_driver::LightDriver_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace led_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'led_driver': ['/home/pi/luko/luko_ws/src/led_driver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::led_driver::LightDriver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::led_driver::LightDriver_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::led_driver::LightDriver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::led_driver::LightDriver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::led_driver::LightDriver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::led_driver::LightDriver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::led_driver::LightDriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94104f9d0ed4c5d119270c5f8f23d22b";
  }

  static const char* value(const ::led_driver::LightDriver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94104f9d0ed4c5d1ULL;
  static const uint64_t static_value2 = 0x19270c5f8f23d22bULL;
};

template<class ContainerAllocator>
struct DataType< ::led_driver::LightDriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "led_driver/LightDriver";
  }

  static const char* value(const ::led_driver::LightDriver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::led_driver::LightDriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string op\n\
uint32[] image\n\
";
  }

  static const char* value(const ::led_driver::LightDriver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::led_driver::LightDriver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.op);
      stream.next(m.image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightDriver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::led_driver::LightDriver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::led_driver::LightDriver_<ContainerAllocator>& v)
  {
    s << indent << "op: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.op);
    s << indent << "image[]" << std::endl;
    for (size_t i = 0; i < v.image.size(); ++i)
    {
      s << indent << "  image[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.image[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LED_DRIVER_MESSAGE_LIGHTDRIVER_H
